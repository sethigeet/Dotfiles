#!/bin/sh

# This script makes taking screenshots easier
# NOTE: `flameshot` and/or `scrot` both have to be installed to run this script!

IMG_DIR="$HOME/Pictures/Screenshots"           # The directory to save the screenshots in
ICON="camera"                                  # The icon to be shown in the notification
TIME=5000                                      # The time after which the notification expires
FILE_FORMAT='Screenshot_%Y-%m-%d-%S_$wx$h.png' # The naming format for the screenshot files

check_for_program() {
  command -v "$1" >/dev/null 2>&1
}

# Check if atleast one of them is installed
if ! check_for_program "flameshot"; then
  if ! check_for_program "scrot"; then
    notify_error "scrot/flameshot"
  fi
fi

# Display Error msg
notify_error() {
  notify-send.py -u critical --icon "$ICON" --app-name "Screenshot" "$@"
  exit 1
}

notify() {
  ans=$(notify-send.py --icon "$ICON" -t $TIME \
    --app-name "Screenshot" \
    'Screenshot taken' \
    "$1" \
    --hint string:image-path:"file://$IMG_DIR/$2" \
    --action img:"Open image" dir:"Open directory")

  ans_is_img=$(echo "$ans" | grep "img")
  ans_is_dir=$(echo "$ans" | grep "dir")
  if [ -n "$ans_is_img" ]; then
    xdg-open "$IMG_DIR/$2"
  elif [ -n "$ans_is_dir" ]; then
    xdg-open "$IMG_DIR"
  fi
}

take_area_screenshot() {
  # I prefer `flameshot` for area screenshots
  if check_for_program "flameshot"; then
    flameshot gui
  else
    file_name=$(scrot --select "$FILE_FORMAT" --exec 'echo $f')
    notify 'Screenshot of the selected area has been taken!' "$file_name"
  fi
}

take_screen_screenshot() {
  # I prefer `scrot` for screen screenshots
  if check_for_program "scrot"; then
    file_name=$(scrot "$FILE_FORMAT" --exec 'echo $f')
    notify 'Screenshot of the whole screen has been taken!' "$file_name"
  else
    flameshot full -p "$IMG_DIR"
  fi
}

take_window_screenshot() {
  # I prefer `scrot` for window screenshots
  if check_for_program "scrot"; then
    file_name=$(scrot --focused "$FILE_FORMAT" --exec 'echo $f')
    notify 'Screenshot of the focued window has been taken!' "$file_name"
  else
    flameshot gui
  fi
}

[ -d "$IMG_DIR" ] || mkdir -p "$IMG_DIR"
cd "$IMG_DIR" || exit

# Options
screen=""
area=""
window=""

# Variable passed to rofi
options="$screen|$area|$window"

selected="$(echo "$options" | rofi -no-lazy-grab -selected-row 1 -sep "|" -dmenu -i \
  -theme "$HOME/.config/rofi/themes/screenshot.rasi")"

# Wait for the rofi window to dissapear
sleep 0.5

case "$selected" in
  "$area") take_area_screenshot ;;

  "$screen") take_screen_screenshot ;;

  "$window") take_window_screenshot ;;
esac
