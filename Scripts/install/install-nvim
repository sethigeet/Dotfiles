#!/bin/sh

set -o nounset # error when referencing undefined variable
set -o errexit # exit when command fails

# Check the running os
is_macos="$(test "$(uname)" = "Darwin" && echo "true" || echo "false")"
is_ubuntu="$(grep -q 'Ubuntu' /etc/os-release && echo "true" || echo "false")"
is_arch="$(test -f "/etc/arch-release" && echo "true" || echo "false")"
os_dets="$(uname -s)"
is_windows="$(test "${os_dets#*MINGW64_NT}" != "$(uname -s)" && echo "true" || echo "false")"

# Exit if the os is windows
if [ "$is_windows" = "true" ]; then
  echo "Sorry, Windows is not supported yet!"
  exit 0
fi

# Helper functions
check_is_macos() {
  [ "$is_macos" = "true" ]
}
check_is_ubuntu() {
  [ "$is_ubuntu" = "true" ]
}
check_is_arch() {
  [ "$is_arch" = "true" ]
}

# Check if the os is recognized
check_is_macos || check_is_ubuntu || check_is_arch || (echo "The OS was not recognized!" && exit 1)

if check_is_macos; then
  nvim_data_path="$HOME/AppData/Local/nvim"
else
  nvim_data_path="$HOME/.local/share/nvim"
fi

# Install node.js
install_node() {
  # On MacOS
  install_node_mac() {
    brew install lua
    brew install node
    brew install yarn
  }

  # On Ubuntu
  install_node_ubuntu() {
    sudo apt install nodejs
    sudo apt install npm
  }

  # On Arch
  install_node_arch() {
    sudo pacman -S nodejs
    sudo pacman -S npm
  }

  echo "Node.js was not found"
  printf "Would you like to install node now [y/n]?: "
  read -r answer
  # If the answer was yes, then install
  if [ "$answer" != "${answer#[Yy]}" ]; then
    echo "Installing node..."

    # Check for the os and install accordingly
    check_is_macos && install_node_mac
    check_is_ubuntu && install_node_ubuntu
    check_is_arch && install_node_arch

    echo "Installing the npm package for neovim..."
    sudo npm i -g neovim
  else
    echo "Please install Node.js manually and then run this script again!"
    exit 0
  fi
}

# Install Pip
install_pip() {
  # On MacOS
  install_pip_mac() {
    sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3 get-pip.py
    rm get-pip.py
  }

  # On Ubuntu
  install_pip_ubuntu() {
    sudo apt install python3-pip >/dev/null
  }

  # On Arch
  install_pip_arch() {
    pacman -S python-pip
  }

  echo "Pip was not found"
  printf "Would you like to install node now [y/n]? "
  read -r answer
  # If the answer was yes, then install
  if [ "$answer" != "${answer#[Yy]}" ]; then
    echo "Installing pip..."

    # Check for the os and install accordingly
    check_is_macos && install_pip_mac
    check_is_ubuntu && install_node_ubuntu
    check_is_arch && install_node_arch

    echo "Installing the pip package for neovim..."
    pip3 install pynvim --user
  else
    echo "Please install Pip manually and then run this script again!"
    exit 0
  fi
}

install_extra() {
  install_extra_mac() {
    brew install ripgrep fzf ranger
    npm install -g tree-sitter-cli
    pip install ueberzug
  }

  install_extra_ubuntu() {
    sudo apt install ripgrep fzf ranger
    sudo apt install libjpeg8-dev zlib1g-dev python-dev python3-dev libxtst-dev
    pip3 install ueberzug
    pip3 install neovim-remote
  }

  install_extra_arch() {
    sudo pacman -S ripgrep fzf ranger tree-sitter
    pip install ueberzug
    pip install neovim-remote
  }

  printf "Would you like to install extra dependencies now [y/n]? "
  read -r answer
  # If the answer was yes, then install
  if [ "$answer" != "${answer#[Yy]}" ]; then
    echo "Installing extra dependencies..."

    # Check for the os and install accordingly
    check_is_macos && install_extra_mac
    check_is_ubuntu && install_extra_ubuntu
    check_is_arch && install_extra_arch
  else
    echo "Please install the extra packages manually and then run this script again!"
    exit 0
  fi
}

# Word list
install_wordlist() {
  if ! command -v wget >/dev/null 2>&1; then
    echo "command wget not found!"
    exit 1
  fi

  install_wordlist_unix() {
    url="https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english.txt"
    wget "$url" -O "$nvim_data_path/wordlist_en.txt" || (echo "Unable to download the wordlist" && exit 1)
  }

  printf "Would you like to download the english wordlist now [y/n]? "
  read -r answer
  # If the answer was yes, then install
  if [ "$answer" != "${answer#[Yy]}" ]; then
    echo "Downloading the wordlist now..."

    install_wordlist_unix
  else
    echo "Please install the wordlist manually!"
  fi
}

# PACKER
install_packer() {
  install_packer_unix() {
    git clone "https://github.com/wbthomason/packer.nvim" "$nvim_data_path/site/pack/packer/start/packer.nvim"
  }

  printf "%s" "Would you like to install packer (plugin manager for nvim) now [y/n]? "
  read -r answer
  # If the answer was yes, then install
  if [ "$answer" != "${answer#[Yy]}" ]; then
    echo "Installing packer..."

    # Check for the os and install accordingly
    check_is_macos && install_packer_unix
    check_is_ubuntu && install_packer_unix
    check_is_arch && install_packer_unix
  else
    echo "Please install packer manually and then run this script again!"
    exit 0
  fi
}

install_plugins() {
  printf "%s" "Would you like to install all plugins using Packer now [y/n]? "
  read -r answer
  # If the answer was yes, then install
  if [ "$answer" != "${answer#[Yy]}" ]; then
    echo "Installing all the plugins specified in your config using packer..."

    nvim --headless "+call luaeval(\"require('packer').sync()\") | q"
  else
    echo "Please install all the plugins manually!"
  fi
}

# Welcome Message
echo "Installing NeoVim"

# install node and neovim support
(which node >/dev/null && echo "Node.js is already installed, moving on...") || install_node

# install pip and neovim support
(which pip3 >/dev/null && echo "Pip is already installed, moving on...") || install_pip

[ -d "$nvim_data_path/site/pack/packer/start/packer.nvim" ] && echo "true with var"
([ -f "$nvim_data_path/wordlist_en.txt" ] && echo "Word list is already present, moving on...") || install_wordlist

install_plugins

echo "Neovim has been sucessfully installed with all its dependencies and a plugin manager!"
echo "I recommend you use my config for neovim from my dotfiles(https://github.com/sethigeet/Dotfiles.git)"
