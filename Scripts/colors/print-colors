#!/bin/bash

help_message="\
usage: print-colors [options]
  options:
    -h, --help                   Shows this help message
    -b, --bit                    Specify the type of the colors (8(default) or 10)
    -m, --mode                   Specify the mode (available modes: normal(default), table, table-slim)
    -n, --name                   Specify how to print the names of the printed colors (ansi(defualt) or human)
    -t, --text                   Specify the text to print (only valid in table or table-slim mode)
"

TEXT="gYw" # The text for the color test
# TEXT="•••"
BITS="8"
MODE="normal"
NAME="ansi"

###############
# NORMAL MODE #
###############
# 10 BIT
print10BitColorsNormal() {
  awk -v term_cols="${width:-$(tput cols || echo 80)}" 'BEGIN{
      s="/\\";
      for (colnum = 0; colnum<term_cols; colnum++) {
          r = 255-(colnum*255/term_cols);
          g = (colnum*510/term_cols);
          b = (colnum*255/term_cols);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum%2+1,1);
      }
      printf "\n";
  }'
}

# 8 BIT Ansi
print8BitColorsNormalAnsi() {
  for i in {0..255}; do
    printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
    if ((i == 15)) || ((i > 15)) && (((i - 15) % 6 == 0)); then
      printf "\n"
    fi
  done
}

##############
# TABLE MODE #
##############
# 8 BIT Ansi
print8BitColorsTableAnsi() {
  echo -e "\n                 40m     41m     42m     43m\
       44m     45m     46m     47m"

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
    '  36m' '1;36m' '  37m' '1;37m'; do
    FG=${FGs// /}
    echo -en " $FGs \033[$FG  $TEXT  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
      echo -en "$EINS \033[$FG\033[$BG   $TEXT  \033[0m"
    done
    echo
  done
  echo
}

# 8 BIT Human
print8BitColorsTableHuman() {
  FGNAMES=(' black ' '  red  ' ' green ' ' yellow' '  blue ' 'magenta' '  cyan ' ' white ')
  BGNAMES=('DFT' 'BLK' 'RED' 'GRN' 'YEL' 'BLU' 'MAG' 'CYN' 'WHT')

  echo "     ┌──────────────────────────────────────────────────────────────────────────┐"
  for b in {0..8}; do
    ((b > 0)) && bg=$((b + 39))

    echo -en "\033[0m ${BGNAMES[b]} │ "

    for f in {0..7}; do
      echo -en "\033[${bg}m\033[$((f + 30))m ${FGNAMES[f]} "
    done

    echo -en "\033[0m │"
    echo -en "\033[0m\n\033[0m     │ "

    for f in {0..7}; do
      echo -en "\033[${bg}m\033[1;$((f + 30))m ${FGNAMES[f]} "
    done

    echo -en "\033[0m │"
    echo -e "\033[0m"

    ((b < 8)) \
      && echo "     ├──────────────────────────────────────────────────────────────────────────┤"
  done
  echo "     └──────────────────────────────────────────────────────────────────────────┘"
}

###################
# TABLE-SLIM MODE #
###################
# 8 BIT Ansi
print8BitColorsTableSlimAnsi() {
  echo -e "\n             40m 41m 42m 43m\
 44m 45m 46m 47m"

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
    '  36m' '1;36m' '  37m' '1;37m'; do
    FG=${FGs// /}
    echo -en " $FGs \033[$FG  $TEXT  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
      echo -en "$EINS \033[$FG\033[$BG $TEXT \033[0m"
    done
    echo
  done
  echo
}

while test $# -gt 0; do
  case "$1" in
    -h | --help)
      echo "$help_message"
      exit 0
      ;;
    -b | --bit)
      shift
      if test $# -gt 0; then
        if [ "$1" == "8" ]; then
          BITS="8"
        elif [ "$1" == "10" ]; then
          BITS="10"
        else
          echo "Invalid type specified!" >&2
          exit 1
        fi
      else
        echo "No type specified!" >&2
        exit 1
      fi
      shift
      ;;
    -m | --mode)
      shift
      if test $# -gt 0; then
        if [ "$1" == "normal" ]; then
          MODE="normal"
        elif [ "$1" == "table" ]; then
          MODE="table"
        elif [ "$1" == "table-slim" ]; then
          MODE="table-slim"
        else
          echo "Invalid mode specified!" >&2
          exit 1
        fi
      else
        echo "No mode specified!" >&2
        exit 1
      fi
      shift
      ;;
    -n | --name)
      shift
      if test $# -gt 0; then
        if [ "$1" == "ansi" ]; then
          NAME="ansi"
        elif [ "$1" == "human" ]; then
          NAME="human"
        else
          echo "Invalid name type specified!" >&2
          exit 1
        fi
      else
        echo "No name type specified!" >&2
        exit 1
      fi
      shift
      ;;
    -t | --text)
      shift
      if test $# -gt 0; then
        TEXT="$1"
      else
        echo "No text specified!" >&2
        exit 1
      fi
      shift
      ;;
    *)
      echo "$help_message" >&2
      exit 1
      ;;
  esac
done

case "$MODE" in
  normal)
    case "$BITS" in
      8)
        case "$NAME" in
          ansi) print8BitColorsNormalAnsi ;;
          human) echo "Not implemented yet!" ;;
        esac
        ;;
      10) print10BitColorsNormal ;;
    esac
    exit 0
    ;;
  table)
    TEXT="${TEXT:0:3}"
    case "$BITS" in
      8)
        case "$NAME" in
          ansi) print8BitColorsTableAnsi ;;
          human) print8BitColorsTableHuman ;;
        esac
        ;;
      10) echo "Not implemented yet!" ;;
    esac
    exit 0
    ;;
  table-slim)
    TEXT="${TEXT:0:1}"
    case "$BITS" in
      8)
        case "$NAME" in
          ansi) print8BitColorsTableSlimAnsi ;;
          human) echo "Not implemented yet!" ;;
        esac
        ;;
      10) echo "Not implemented yet!" ;;
    esac
    exit 0
    ;;
esac

echo "$help_message" >&2
exit 1
